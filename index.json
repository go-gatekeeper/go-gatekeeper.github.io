[
{
	"uri": "https://gogatekeeper.github.io/configuration/",
	"title": "Configuration Options",
	"tags": [],
	"description": "",
	"content": "listen  Environment Variable: PROXY_LISTEN Example: :80 Required: Yes Default: None Related: listen-http   listen configures the main listening interface (compare with listen-http). Examples for\n regular http(s):  use :80 or :443 to listen on all interfaces 127.0.0.1:443 to only listen on a certain interface   unix socket: unix:///tmp/echo.sock (add the prefix unix://)  This config is passed to golang\u0026rsquo;s net.Listen(), so use strings acceptable by address.\n  listen-http  Environment Variable: PROXY_LISTEN_HTTP Example: :80 Required: Yes Default: None Related: listen   listen-http configures the secondary listening interface. This listener has no TLS support, and uses the same configuration syntax as listen.\nUsually, we only use listen and not set listen-http.\n  discovery-url  Environment Variable: PROXY_DISCOVERY_URL Example: https://keycloak.localhost/auth/realms/applications (refer to demo) Required: Yes, unless skip-token-verification is set, and gatekeeper is in reverse proxy mode Default: None Related: skip-openid-provider-tls-verify, openid-provider-proxy, openid-provider-timeout   gatekeeper will get information about the authorization server through the authorization server\u0026rsquo;s openid-configuration well-known URI, according to RFC8414.\ngatekeeper will grab this metadata from discovery-url + /.well-known/openid-configuration as is registered with IANA\nSpecify discovery-url without /.well-known/openid-configuration.\nHere are links to information about discovery-urls for some other OAuth providers\n Google Identity Platform Auth0 IdentityServer4 PingFederate   client-id  Environment Variable: PROXY_CLIENT_ID Example: whoami (refer to demo) Required: Yes, unless skip-token-verification is set, and gatekeeper is in reverse proxy mode Default: None Related: client-secret   client-id is the Client ID for an OAuth2 client (your app is the OAuth2 client, in this case).\nIn reverse proxy mode As part of the OAuth2 authorization code flow, gatekeeper will use client-id and client-secret to authenticate with the server when it needs to\n exchange the authorization code for tokens refresh the access token  The client ID and secret are also used to invoke the revocation URL at the authorization server.\nIf the login handler is enabled (enable-login-handler), the credentials are also used to login at the authorization provider using the OAuth2 Resource Owner Password Credentials flow.\nclient-id is also used to check access tokens to ensure that client-id is among the audiences in the aud field of the token.\nIn forward-signing proxy mode gatekeeper will use client-id and client-secret to authenticate with the server to get tokens for outbound requests.\n client-secret  Environment Variable: PROXY_CLIENT_SECRET Example: 932475b6-9748-41b8-8fd7-c6ce2d845ece (refer to demo) Required: Yes, unless skip-token-verification is set, and gatekeeper is in reverse proxy mode Default: None Related: client-id   client-secret is the client secret for an OAuth2 client (your app is the OAuth2 client, in this case). This is used with client-id as a pair of credentials. See client-id for how this is used.\n redirection-url  Environment Variable: PROXY_REDIRECTION_URL Example: 932475b6-9748-41b8-8fd7-c6ce2d845ece (refer to demo) Required: Yes, unless skip-token-verification is set, and gatekeeper is in reverse proxy mode Default: None Related: client-id   client-secret is the client secret for an OAuth2 client (your app is the OAuth2 client, in this case). This is used with client-id as a pair of credentials. See client-id for how this is used.\n revocation-url  Environment Variable: PROXY_REVOCATION_URL Example: https://keycloak.localhost/auth/realms/applications/protocol/openid-connect/logout Required: No. Will attempt to discover this url from OpenID discovery-url response Default: None Related: discovery-url   If revocation-url is not specified, the end_session_endpoint of the OpenID discovery-url response will be used as the revocation-url. If neither is available, no logout at the authorization provider will be done.\nrevocation-url is used during the logout process. When the /oauth/logout endpoint on gatekeeper is called, gatekeeper will request revocation of this session\u0026rsquo;s refresh token by doing an authenticated POST to this revocation-url with the refresh token.\n skip-openid-provider-tls-verify  Environment Variable: None Example: true or false Required: No Default: false Related: -   If skip-openid-provider-tls-verify is set to true, gatekeeper will skip verification of the authorization server\u0026rsquo;s (or OpenID provider\u0026rsquo;s, in this case) certificate chain and host name.\ngatekeeper will accept any certificate presented by the server and any host name in that certificate.\nThis flag is directly used to configure InsecureSkipVerify in golang\u0026rsquo;s tls package.\n openid-provider-proxy  Environment Variable: None Example: http://proxy.example.com:80 Required: No Default: No proxy Related: -   Gatekeeper will use this proxy for requests to the OpenID provider, for example to reach the discovery url, to get tokens, etc.\n openid-provider-timeout  Environment Variable: None Example: 3s, or 314ms, (any string that can be parsed by ParseDuration Required: No Default: 30s Related: -   Timeout for pulling OpenID configuration from the OpenID provider. Will be parsed by ParseDuration.\n base-uri  Environment Variable: PROXY_BASE_URI Example: /base-uri Required: No Default: \u0026quot;\u0026quot; Related: -   base-uri is the the base URI of your app. This is where your app lives at the domain, so if your domain is https://www.example.com and your app is at the path https://www.example.com/app, then base URI should be /app.\nThis is used to\n build oauth related paths, such as the /logout endpoint set the path for cookies, which determines which parts of your site the cookie is valid on, which in turn determines if the user remains authenticated as they visit different parts of the site   oauth-uri  Environment Variable: PROXY_OAUTH_URI Example: /base-uri Required: No Default: \u0026quot;/oauth\u0026quot; Related: -   This is the prefix for the OAuth endpoints on gatekeeper, such as (if the default /oauth is used, and base-uri is \u0026quot;\u0026quot;)\n /oauth/authorization: Redirects to the authorization server /oauth/callback: Handles callback (response) from the authorization server /oauth/expired: Checks if the token has expired /oauth/health: The healthcheck endpoint for gatekeeper /oauth/logout?redirect=url: Direct the browser here to log out /oauth/token: Return the token in a json /oauth/login: A generic endpoint for clients to perform a user credentials login to the authorization server   oauth-uri  Environment Variable: PROXY_OAUTH_URI Example: /base-uri Required: No Default: \u0026quot;/oauth\u0026quot; Related: -   This is the prefix for the OAuth endpoints on gatekeeper, such as (if the default /oauth is used, and base-uri is \u0026quot;\u0026quot;)\n /oauth/authorization: Redirects to the authorization server /oauth/callback: Handles callback (response) from the authorization server /oauth/expired: Checks if the token has expired /oauth/health: The healthcheck endpoint for gatekeeper /oauth/logout?redirect=url: Direct the browser here to log out /oauth/token: Return the token in a json /oauth/login: A generic endpoint for clients to perform a user credentials login to the authorization server   scopes  Environment Variable: None Example: (yaml/json list) [\u0026quot;offline\u0026quot;, \u0026quot;foobar\u0026quot;] Required: No Default: Always appends these: [\u0026quot;openid\u0026quot;, \u0026quot;email\u0026quot;, \u0026quot;profile\u0026quot;] Related: -   These are the scopes that are requested when the client is redirected to the authorization server.\nIn Keycloak, these are the scopes that are either created as part of the client, to client scopes in the realm. For Keycloak, scopes are strings tagged to mappers. If requested by the client, the associated mappers will be applied on the tokens.\n upstream-url  Environment Variable: PROXY_UPSTREAM_URL Example: http://whoami:80 (refer to demo) Required: Yes Default: None Related: upstream-ca   This tells gatekeeper how to contact the upstream (your app/service that is protected by gatekeeper)\n upstream-ca  Environment Variable: None Example: /tmp/path-to-ca-cert (PEM encoded) Required: No Default: None (Will use system cert store) Related: upstream-url   This is the TLS CA certificate that will be used to verify TLS when communicating with the upstream.\n resources  Environment Variable: None Example: Refer to demo Required: Yes Default: None Related: -   These tell gatekeeper how to authenticate or authorize the resources at the upstream.\nTODO add more details.\n headers  Environment Variable: None Example: headers: x-foo-bar: baz  Required: No Default: None Related: -   Add custom headers to the request that goes upstream. The headers will be capitalized:\nx-foo-bar =\u0026gt; X-Foo-Bar X-FooBar =\u0026gt; X-Foobar X-FOO-BAR =\u0026gt; X-Foo-Bar  preserve-host  Environment Variable: None Example: true or false Required: No Default: false Related: -   If preserve-host is true, the Host header that gatekeeper receives will be forwarded to the upstream service. Otherwise, the Host header will be set to whatever gatekeeper uses to make the request to the upstream.\n request-id-header  Environment Variable: PROXY_REQUEST_ID_HEADER Example: \u0026quot;X-Request-Id\u0026quot; Required: No Default: \u0026quot;X-Request-Id\u0026quot; Related: enable-request-id   The HTTP header name for the autogenerated request ID sent as a header to the upstream service. Will be added if enable-request-id is set to true.\n enable-logout-redirect  Environment Variable: None Example: true or false Required: No Default: false Related: -   If true, when the logout address is accessed, the user will be redirected to the identity provider on logout, with a redirect_uri pointing back to the gatekeeper service.\nThe identity provider can use redirect_uri to redirect the user back to gatekeeper again.\nIf false, when the logout address is accessed, the user will remain at gatekeeper\u0026rsquo;s logout url.\n enable-default-deny  Environment Variable: None Example: true or false Required: No Default: false Related: resources   Used in conjunction with resources for authorization.\nIf set, gatekeeper will deny all requests to the upstream by default. This can then be relaxed with definition of resources.\n enable-encrypted-token  Environment Variable: None Example: true or false Required: No Default: false Related: force-encrypted-cookie, encryption-key   If set, gatekeeper will\n Encrypt the access token in the cookie that is set for the browser with encryption-key Assume that incoming access tokens in the Authorization header are also encrypted, and will decrypt the token before using it   force-encrypted-cookie  Environment Variable: None Example: true or false Required: No Default: false Related: enable-encrypted-token, encryption-key   Same as enable-encrypted-token. TODO confirm this.\n enable-logging  Environment Variable: None Example: true or false Required: No Default: false Related: -   If set, requests to gatekeeper are logged. Here\u0026rsquo;s a sample of the information that is logged:\n2020-12-26T06:21:38.851Z info src/middleware.go:146 client request {\u0026quot;latency\u0026quot;: 0.000209767, \u0026quot;status\u0026quot;: 303, \u0026quot;bytes\u0026quot;: 322, \u0026quot;client_ip\u0026quot;: \u0026quot;172.18.0.2:39368\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/oauth/authorize\u0026quot;} raw path is also logged if it is different from path and is not \u0026quot;\u0026quot;. See go docs for the difference between Path and RawPath.\n enable-json-logging  Environment Variable: None Example: true or false Required: No Default: false Related: -   If set, logging is formatted in json.\nIf the regular log is like this,\n2020-12-26T06:21:38.851Z info src/middleware.go:146 client request {\u0026quot;latency\u0026quot;: 0.000209767, \u0026quot;status\u0026quot;: 303, \u0026quot;bytes\u0026quot;: 322, \u0026quot;client_ip\u0026quot;: \u0026quot;172.18.0.2:39368\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;GET\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/oauth/authorize\u0026quot;} the json version is like this.\n{\u0026quot;level\u0026quot;:\u0026quot;info\u0026quot;,\u0026quot;ts\u0026quot;:\u0026quot;2020-12-26T06:21:38.851Z\u0026quot;,\u0026quot;caller\u0026quot;:\u0026quot;src/middleware.go:146\u0026quot;,\u0026quot;msg\u0026quot;:\u0026quot;client request\u0026quot;,\u0026quot;latency\u0026quot;:0.000209767,\u0026quot;status\u0026quot;:303,\u0026quot;bytes\u0026quot;:322,\u0026quot;client_ip\u0026quot;:\u0026quot;172.18.0.2:39368\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;GET\u0026quot;,\u0026quot;path\u0026quot;:\u0026quot;/oauth/authorize\u0026quot;}  enable-forwarding  Environment Variable: None Example: true or false Required: No Default: false Related: -   Sets gatekeeper in a forwarding proxy mode, for signing outbound requests. This is mutually exclusive with the default reverse proxy mode.\n enable-security-filter  Environment Variable: PROXY_ENABLE_SECURITY_FILTER Example: true or false Required: No Default: false Related: -   Enables a bunch of security checks on the request using middleware. TODO add more detail.\n enable-refresh-tokens  Environment Variable: PROXY_ENABLE_REFRESH_TOKEN Example: true or false Required: No Default: false Related: -   Set this to get gatekeeper to handle refreshing of access tokens. Otherwise, gatekeeper will just re-authenticate with the authorization server whenever the access token expires.\n "
},
{
	"uri": "https://gogatekeeper.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "gatekeeper gatekeeper is the simple authentication and authorization proxy that gets your app off the ground!\n gatekeeper was previously known as louketo and keycloak-gatekeeper.\n Goals  To have just enough auth features (both authentication and authorization) to get your app off the ground To be well documented and easy to get started with To remain true to the roots of this project  gatekeeper will be interoperable with keycloak out of the box, but not be limited to work only with keycloak    Announcements! gatekeeper is reborn with from the ashes of louketo under the new organization gogatekeeper.\nIn the next few months, we will be working to\n Get basic CI set up Review/update/publish docs Update Keycloak documentation with new links  Watch this space!\n"
},
{
	"uri": "https://gogatekeeper.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://gogatekeeper.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]